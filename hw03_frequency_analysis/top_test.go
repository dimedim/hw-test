package hw03frequencyanalysis

import (
	"testing"

	"github.com/stretchr/testify/require"
)

var (
	taskWithAsteriskIsCompleted = true

	text = `Как видите, он  спускается  по  лестнице  вслед  за  своим
	другом   Кристофером   Робином,   головой   вниз,  пересчитывая
	ступеньки собственным затылком:  бум-бум-бум.  Другого  способа
	сходить  с  лестницы  он  пока  не  знает.  Иногда ему, правда,
		кажется, что можно бы найти какой-то другой способ, если бы  он
	только   мог   на  минутку  перестать  бумкать  и  как  следует
	сосредоточиться. Но увы - сосредоточиться-то ему и некогда.
		Как бы то ни было, вот он уже спустился  и  готов  с  вами
	познакомиться.
	- Винни-Пух. Очень приятно!
		Вас,  вероятно,  удивляет, почему его так странно зовут, а
	если вы знаете английский, то вы удивитесь еще больше.
		Это необыкновенное имя подарил ему Кристофер  Робин.  Надо
	вам  сказать,  что  когда-то Кристофер Робин был знаком с одним
	лебедем на пруду, которого он звал Пухом. Для лебедя  это  было
	очень   подходящее  имя,  потому  что  если  ты  зовешь  лебедя
	громко: "Пу-ух! Пу-ух!"- а он  не  откликается,  то  ты  всегда
	можешь  сделать вид, что ты просто понарошку стрелял; а если ты
	звал его тихо, то все подумают, что ты  просто  подул  себе  на
	нос.  Лебедь  потом  куда-то делся, а имя осталось, и Кристофер
	Робин решил отдать его своему медвежонку, чтобы оно не  пропало
	зря.
		А  Винни - так звали самую лучшую, самую добрую медведицу
	в  зоологическом  саду,  которую  очень-очень  любил  Кристофер
	Робин.  А  она  очень-очень  любила  его. Ее ли назвали Винни в
	честь Пуха, или Пуха назвали в ее честь - теперь уже никто  не
	знает,  даже папа Кристофера Робина. Когда-то он знал, а теперь
	забыл.
		Словом, теперь мишку зовут Винни-Пух, и вы знаете почему.
		Иногда Винни-Пух любит вечерком во что-нибудь поиграть,  а
	иногда,  особенно  когда  папа  дома,  он больше любит тихонько
	посидеть у огня и послушать какую-нибудь интересную сказку.
		В этот вечер...`

	text1 = `"Нога, нога! 'нога'" "какой-то" "какойто" "dog,cat" 
	"dogcat" "-------" "-" Нога, нОга. "нога!" 'нога' ------- - 
	"какой-то" какойто dog,cat dogcat`
	text2 = `- - - - - - - - - - - - - - -`

	bigText = `Домашнее задание №3 «Частотный анализ»
	Необходимо написать Go функцию, принимающую на вход 
	строку с текстом и возвращающую слайс с 10-ю наиболее
	 часто встречаемыми в тексте словами.

	Если слова имеют одинаковую частоту, то должны 
	быть отсортированы лексикографически.

	Словом считается набор символов, разделенных 
	пробельными символами.

	Если есть более 10 самых частотых слов (например
	 15 разных слов встречаются ровно 133 раза, остальные < 100)
	  то следует вернуть 10 лексикографически первых слов.

	Словоформы не учитываем: "нога", "ногу", "ноги" 
	- это разные слова.

	Слово с большой и маленькой буквы считать за 
	разные слова. "Нога" и "нога" - это разные слова.

	Знаки препинания считать "буквами" слова или 
	отдельными словами. "-" (тире) - это отдельное слово.
	 "нога," и "нога" - это разные слова.

	Пример
	cat and dog, one dog,two cats and one man
	Топ 7:

	and (2)
	one (2)
	cat (1)
	cats (1)
	dog, (1)
	dog,two (1)
	man (1)
	При необходимости можно выделять дополнительные 
	функции / ошибки.

	(*) Дополнительное задание: не учитывать регистр 
	букв и знаки препинания по краям слова:

	"Нога" и "нога" - это одинаковые слова, "нога!", 
	"нога", "нога," и " 'нога' " - это одинаковые слова;
	"какой-то" и "какойто" - это разные слова.
	"dog,cat", "dog...cat", "dogcat" - разные слова
	"-------" это слово
	"-" словом не является
	Критерии оценки
	Пайплайн зелёный - 4 балла
	Добавлены новые юнит-тесты - до 4 баллов
	Понятность и чистота кода - до 2 баллов
	Дополнительное задание на баллы не влияет
	Зачёт от 7 баллов
	Подсказки
	regexp.MustCompile
	strings.Split
	strings.Fields
	sort.Slice
	Частые ошибки
	regexp.MustCompile используется в функции, 
	а не уровне пакета - это плохо по следующим причинам:
	производительность: нет смысла компилировать 
	регулярку каждый раз при вызове функции;
	функция не должна паниковать!
	При выполнении задания со звёздочкой забывают, 
	что тире не должно являться словом.`

	englishWords = `Unlike arrays, slices are typed only
	 by the elements they contain (not the number of elements).
	  An uninitialized slice equals to nil and has length 0.
	To create an empty slice with non-zero length, 
	use the builtin make. Here we make a slice of strings 
	of length 3 
	(initially zero-valued). By default a new slices capacity
	is equal to its length; if we know the slice is going 
	to grow ahead of time, it
	possible to pass a capacity explicitly as an additional
	 parameter to make.`
)

func TestTop10(t *testing.T) {
	t.Run("no words in empty string", func(t *testing.T) {
		require.Len(t, Top10(""), 0)
	})

	t.Run("positive test", func(t *testing.T) {
		if taskWithAsteriskIsCompleted {
			expected := []string{
				"а",         // 8
				"он",        // 8
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"в",         // 4
				"его",       // 4
				"если",      // 4
				"кристофер", // 4
				"не",        // 4
			}
			require.Equal(t, expected, Top10(text))
		} else {
			expected := []string{
				"он",        // 8
				"а",         // 6
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"-",         // 4
				"Кристофер", // 4
				"если",      // 4
				"не",        // 4
				"то",        // 4
			}
			require.Equal(t, expected, Top10(text))
		}
	})
}

func TestTop10Custom(t *testing.T) {
	t.Run("edge conditions", func(t *testing.T) {
		expected := []string{
			"нога",
			"-------",
			"cat",
			"dog",
			"dogcat",
			"какой-то",
			"какойто",
		}
		require.Equal(t, expected, Top10(text1))
	})

	t.Run("invalid", func(t *testing.T) {
		expected := []string{}
		require.Equal(t, expected, Top10(text2))
	})

	t.Run("bigText", func(t *testing.T) {
		expected := []string{"нога", "слова", "и", "это", "не", "dog", "разные", "cat", "and", "one"}
		require.Equal(t, expected, Top10(bigText))
	})

	t.Run("englishWords", func(t *testing.T) {
		expected := []string{"to", "length", "of", "slice", "the", "a", "an", "make", "by", "capacity"}
		require.Equal(t, expected, Top10(englishWords))
	})
}
